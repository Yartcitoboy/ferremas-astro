---
// Import necessary components from individual files
import EmailInput from "./input/EmailInput.astro";
import PasswordInput from "./input/PasswordInput.astro";
import Checkbox from "./input/Checkbox.astro"; // <-- Comentado en tu HTML, lo mantengo aquí por si lo usas
import GoogleBtn from "@components/ui/buttons/GoogleBtn.astro";
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";

import DireccionInput from "./camposInput/DireccionInput.astro";
import TelefonoInput from "./camposInput/TelefonoInput.astro";
import NombreApellidoInput from "./camposInput/NombreApellidoInput.astro";
import RutInput from "./camposInput/RutInput.astro";
import RolInput from "./camposInput/RolInput.astro";

// Config object for customization of the component
const config = {
  id: "hs-toggle-between-modals-register-modal", // Modal identifier
  title: "Regístrate", // Título principal - Corregido "Registrate" a "Regístrate"
  subTitle: "¿Ya tienes una cuenta?", // Subtítulo
  loginBtn: "Inicia sesión aquí", // Texto para el botón de login
  loginBtnDataHS: "#hs-toggle-between-modals-login-modal", // Enlace al modal de login
};
---

<div
  id={config.id}
  class="hs-overlay hs-overlay-backdrop-open:bg-neutral-900/90 fixed inset-0 z-50 hidden h-full w-full"
>
  <div
    class="hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 m-3 mt-0 opacity-0 transition-all ease-out sm:mx-auto sm:w-full sm:max-w-lg"
  >
    <div class="mx-auto w-full max-w-md p-6">
      <div
        class="mt-7 max-h-full overflow-hidden rounded-xl border border-neutral-200 bg-neutral-100 shadow-xs dark:border-neutral-700 dark:bg-neutral-800"
      >
        <div class="p-4 sm:p-7">
          <div class="text-center">
            <h2
              class="block text-2xl font-bold text-neutral-800 dark:text-neutral-200"
            >
              {config.title}
            </h2>
            <p class="mt-2 text-sm text-neutral-600 dark:text-neutral-400">
              {config.subTitle}
              <button
                class="rounded-lg p-1 font-medium text-orange-400 decoration-2 ring-zinc-500 outline-hidden hover:underline focus-visible:ring-3 dark:text-orange-400 dark:ring-zinc-200 dark:focus:outline-hidden"
                data-hs-overlay={config.loginBtnDataHS}
              >
                {config.loginBtn}
              </button>
            </p>
          </div>
          <div class="mt-5">
            <GoogleBtn title="Regístrate con Google" />
            <div
              class="flex items-center py-3 text-xs text-neutral-400 uppercase before:me-6 before:flex-[1_1_0%] before:border-t before:border-neutral-200 after:ms-6 after:flex-[1_1_0%] after:border-t after:border-neutral-200 dark:text-neutral-500 dark:before:border-neutral-600 dark:after:border-neutral-600"
            >
              O
            </div>
            <form method="post" action="http://localhost:8000/usuarios/">
              <div class="grid gap-y-4">
                <NombreApellidoInput
                  id="register-name"
                  errorId="register-name-error"
                  label="Nombre y Apellido"
                />

                <RutInput
                  id="register-rut"
                  errorId="register-rut-error"
                  label="Rut"
                />
                <DireccionInput
                  id="register-direccion"
                  errorId="register-direccion-error"
                  label="Dirección de residencia"
                />
                <TelefonoInput
                  id="register-telefono"
                  errorId="register-telefono-error"
                  label="Teléfono"
                />
                <EmailInput
                  id="register-email"
                  errorId="register-email-error"
                />

                <PasswordInput
                  id="create-password"
                  errorId="register-password-error"
                  
                />
                <PasswordInput
                  label="Confirmar contraseña"
                  id="confirm-password"
                  errorId="confirm-password-error"
                  
                />

                <RolInput value="5" />

                <AuthBtn title="Crear Cuenta" />
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="module">
  const form = document.querySelector('form[action="http://localhost:8000/usuarios/"]');
  const nameInput = document.getElementById("register-name");
  const rutInput = document.getElementById("register-rut");
  const direccionInput = document.getElementById("register-direccion");
  const telefonoInput = document.getElementById("register-telefono");
  const emailInput = document.getElementById("register-email");
  const passInput = document.getElementById("create-password");
  const passConfirmInput = document.getElementById("confirm-password");

  // Obtén los modales principales
  const registerModal = document.getElementById("hs-toggle-between-modals-register-modal");
  const graciasModal = document.getElementById("modal-gracias");
  const loginModal = document.getElementById("hs-toggle-between-modals-login-modal");

  // Restricción: solo letras y espacios en nombre
  nameInput.addEventListener("input", function () {
    this.value = this.value.replace(/[^A-Za-zÁÉÍÓÚáéíóúÑñ\s]/g, "");
  });

  form.onsubmit = async (e) => {
    e.preventDefault(); // Previene el envío por defecto del formulario una sola vez
    let valido = true;
    document.querySelectorAll('[id$="-error"]').forEach(el => el.textContent = "");

    // --- Validación de campos ---
    // Nombre: mínimo 3 caracteres
    if (!nameInput.value.trim()) {
      document.getElementById("register-name-error").textContent = "El nombre es obligatorio.";
      valido = false;
    } else if (nameInput.value.trim().length < 3) {
      document.getElementById("register-name-error").textContent = "El nombre debe tener al menos 3 caracteres.";
      valido = false;
    }

    // RUT: formato chileno básico y mínimo 8 caracteres
    if (!rutInput.value.trim()) {
      document.getElementById("register-rut-error").textContent = "El RUT es obligatorio.";
      valido = false;
    } else if (!/^[0-9]{7,8}-[0-9kK]$/.test(rutInput.value.trim())) {
      document.getElementById("register-rut-error").textContent = "El RUT debe ser válido (Ej: 12345678-9).";
      valido = false;
    }

    // Dirección: mínimo 10 caracteres
    if (!direccionInput.value.trim()) {
      document.getElementById("register-direccion-error").textContent = "La dirección es obligatoria.";
      valido = false;
    } else if (direccionInput.value.trim().length < 10) {
      document.getElementById("register-direccion-error").textContent = "La dirección debe tener al menos 10 caracteres.";
      valido = false;
    }

    // Teléfono: mínimo 9 dígitos, solo números
    if (!telefonoInput.value.trim()) {
      document.getElementById("register-telefono-error").textContent = "El teléfono es obligatorio.";
      valido = false;
    } else if (!/^[0-9]{9,}$/.test(telefonoInput.value.trim())) {
      document.getElementById("register-telefono-error").textContent = "El teléfono debe tener al menos 9 dígitos.";
      valido = false;
    }

    // Email requerido, formato y dominio permitido
    const emailVal = emailInput.value.trim().toLowerCase();
    const formatoValido = /^[^@]+@[^@]+\.[a-zA-Z]{2,}$/.test(emailVal);
    const dominioValido =
      emailVal.endsWith("@gmail.com") ||
      emailVal.endsWith("@gmail.cl") ||
      emailVal.endsWith("@hotmail.com") ||
      emailVal.endsWith("@hotmail.cl");

    if (!emailVal) {
      document.getElementById("register-email-error").textContent = "El email es obligatorio.";
      valido = false;
    } else if (!formatoValido) {
      document.getElementById("register-email-error").textContent = "Email inválido.";
      valido = false;
    } else if (!dominioValido) {
      document.getElementById("register-email-error").textContent =
        "El correo debe ser @gmail.com, @gmail.cl, @hotmail.com o @hotmail.cl";
      valido = false;
    }

    // Contraseña: mínimo 6 caracteres
    if (!passInput.value) {
      document.getElementById("register-password-error").textContent = "La contraseña es obligatoria.";
      valido = false;
    } else if (passInput.value.length < 6) {
      document.getElementById("register-password-error").textContent = "La contraseña debe tener al menos 6 caracteres.";
      valido = false;
    }

    // Confirmar contraseña: igual a la contraseña y mínimo 6 caracteres
    if (!passConfirmInput.value) {
      document.getElementById("confirm-password-error").textContent = "Debes confirmar la contraseña.";
      valido = false;
    } else if (passConfirmInput.value.length < 6) {
      document.getElementById("confirm-password-error").textContent = "La confirmación debe tener al menos 6 caracteres.";
      valido = false;
    } else if (passInput.value !== passConfirmInput.value) {
      document.getElementById("confirm-password-error").textContent = "Las contraseñas no coinciden.";
      valido = false;
    }
    // --- Fin de validación de campos ---


    if (!valido) {
      return; // Detiene el envío si hay errores de validación
    }

    // Envía el formulario por fetch
    const formData = new FormData(form);
    const response = await fetch(form.action, {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      // 1. Ocultar el modal de registro principal
      if (registerModal) registerModal.classList.add("hidden");
        // Asegúrate de que cualquier overlay generado por hs-overlay también se oculte
        // Esto a veces requiere un pequeño retraso o una llamada a la API de Preline/HS si la tienen
        // para cerrar el modal correctamente, pero 'hidden' debería ser suficiente para lo visual.
      }

      // 2. Mostrar el modal de gracias
      document.dispatchEvent(new CustomEvent("registroExitoso"));
      // Opcional: limpiar el formulario después de un registro exitoso
      form.reset();

    
  };

  


</script>

