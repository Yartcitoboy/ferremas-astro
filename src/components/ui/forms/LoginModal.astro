---
import EmailInput from "./input/EmailInput.astro";
import PasswordInput from "./input/PasswordInput.astro";
import Checkbox from "./input/Checkbox.astro";
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";
import GoogleBtn from "@components/ui/buttons/GoogleBtn.astro";

const config = {
  id: "hs-toggle-between-modals-login-modal",
  title: "Iniciar Sesión",
  subTitle: "¿Aún no tienes cuenta?",
  registerBtn: "Regístrate aquí",
  registerBtnDataHS: "#hs-toggle-between-modals-register-modal",
};
---

<div
  id={config.id}
  class="hs-overlay hs-overlay-backdrop-open:bg-neutral-900/90 absolute start-0 top-0 z-50 hidden h-full w-full"
>
  <div
    class="hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 m-3 mt-0 opacity-0 transition-all ease-out sm:mx-auto sm:w-full sm:max-w-lg"
  >
    <div class="mx-auto w-full max-w-md p-6">
      <div
        class="mt-7 rounded-xl border border-neutral-200 bg-neutral-100 shadow-xs dark:border-neutral-700 dark:bg-neutral-800"
      >
        <div class="p-4 sm:p-7">
          <div class="text-center">
            <h2
              class="block text-2xl font-bold text-neutral-800 dark:text-neutral-200"
            >
              {config.title}
            </h2>
            <p class="mt-2 text-sm text-neutral-600 dark:text-neutral-400">
              {config.subTitle}
              <button
                class="rounded-lg p-1 font-medium text-orange-400 decoration-2 ring-zinc-500 outline-hidden hover:underline focus-visible:ring-3 dark:text-orange-400 dark:ring-zinc-200 dark:focus:outline-hidden"
                data-hs-overlay={config.registerBtnDataHS}
              >
                {config.registerBtn}
              </button>
            </p>
          </div>
          <div class="mt-5">
            <GoogleBtn title="Inicia sesión con Google" />

            <div
              class="flex items-center py-3 text-xs text-neutral-400 uppercase before:me-6 before:flex-[1_1_0%] before:border-t before:border-neutral-200 after:ms-6 after:flex-[1_1_0%] after:border-t after:border-neutral-200 dark:text-neutral-500 dark:before:border-neutral-600 dark:after:border-neutral-600"
            >
              O
            </div>
            <form id="loginForm" method="post">
              <div class="grid gap-y-4">
                <EmailInput
                  id="login-email"
                  errorId="login-email-error"
                  name="email"
                />
                <PasswordInput
                  forgot={true}
                  id="password"
                  errorId="login-password-error"
                  content="8+ characters required"
                  name="contrasena"
                />
                <Checkbox id="remember-me" />
                <AuthBtn title="Acceder" />
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal de cambio de contraseña -->
<div
  id="modal-cambiar-contrasena"
  class="bg-opacity-40 fixed inset-0 z-50 flex hidden items-center justify-center bg-black"
>
  <form
    id="form-cambiar-contrasena"
    class="w-full max-w-md rounded-lg bg-white p-8 shadow-lg"
  >
    <h3 class="mb-4 text-center text-lg font-bold">Cambia tu contraseña</h3>
    <input
      type="password"
      id="nueva-contrasena"
      class="mb-4 w-full rounded border px-3 py-2"
      placeholder="Nueva contraseña"
      required
    />
    <button
      type="submit"
      class="w-full rounded bg-orange-500 py-2 font-semibold text-white hover:bg-orange-600"
      >Actualizar</button
    >
  </form>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const loginForm = document.getElementById(
      "loginForm"
    ) as HTMLFormElement | null;
    let idUsuarioParaCambio: string | null = null;

    // Función para decodificar el rol desde el token
    function obtenerRolDesdeToken(token: string) {
      try {
        const tokenPayload = JSON.parse(atob(token.split(".")[1]));
        return tokenPayload.role;
      } catch {
        return "";
      }
    }

    // Función para redirigir según el rol
    function redirigirPorRol(userRole: string) {
      if (userRole === "Administrador") {
        window.location.href = "/users/dashAdmin";
      } else if (userRole === "Bodeguero") {
        window.location.href = "/users/dashBodeguero";
      } else if (userRole === "Vendedor") {
        window.location.href = "/users/dashVendedor";
      } else if (userRole === "Contador") {
        window.location.href = "/users/dashContador";
      } else {
        window.location.href = "/";
      }
    }

    // Mostrar modal de cambio de contraseña
    function mostrarModalCambioContrasena(id_usuario: string) {
      idUsuarioParaCambio = id_usuario;
      const modalCambiar = document.getElementById("modal-cambiar-contrasena");
      if (modalCambiar) {
        modalCambiar.classList.remove("hidden");
      }
    }

    // Login
    if (loginForm) {
      loginForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(loginForm);
        const formObj: Record<string, string> = {};
        formData.forEach((value, key) => {
          formObj[key] = String(value);
        });
        const body = new URLSearchParams(formObj).toString();

        try {
          const response = await fetch(
            "http://localhost:8000/usuarios_auth/login",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/x-www-form-urlencoded",
              },
              body: body,
            }
          );

          const data = await response.json();

          if (response.ok) {
            localStorage.setItem("accessToken", data.access_token);
            localStorage.setItem("userName", data.nombre_apellidos || "Usuario");
            localStorage.setItem("id_usuario", data.id_usuario);

            const userRole = obtenerRolDesdeToken(data.access_token);
            if (!userRole) {
              alert("Error al procesar el rol del usuario.");
              return;
            }

            // Solo mostrar el modal si es admin y debe cambiar contraseña
            if (data.debe_cambiar_contrasena && userRole === "Administrador") {
              mostrarModalCambioContrasena(data.id_usuario);
              return;
            }

            window.dispatchEvent(new CustomEvent("login-success"));
            redirigirPorRol(userRole);
          } else {
            alert(data.detail || "Error al iniciar sesión.");
          }
        } catch (error) {
          alert("Error de conexión.");
        }
      });
    }

    // Cambio de contraseña
    const formCambio = document.getElementById("form-cambiar-contrasena");
    if (formCambio) {
      formCambio.onsubmit = async (e) => {
        e.preventDefault();
        const nuevaInput = document.getElementById("nueva-contrasena");
        const nueva = nuevaInput ? (nuevaInput as HTMLInputElement).value : "";
        if (!nueva || !idUsuarioParaCambio) {
          alert("Debes ingresar la nueva contraseña.");
          return;
        }
        const res = await fetch(
          "http://localhost:8000/usuarios_auth/cambiar_contrasena",
          {
            method: "POST",
            body: new URLSearchParams({
              id_usuario: String(idUsuarioParaCambio),
              nueva_contrasena: nueva,
            }),
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
          }
        );
        if (res.ok) {
          alert("Contraseña actualizada. Redirigiendo a tu panel...");
          // Oculta el modal
          const modalCambiar = document.getElementById("modal-cambiar-contrasena");
          if (modalCambiar) {
            modalCambiar.classList.add("hidden");
          }
          // Redirige según el rol guardado en el token
          const token = localStorage.getItem("accessToken");
          const userRole = token ? obtenerRolDesdeToken(token) : "";
          redirigirPorRol(userRole);
        } else {
          alert("Error al actualizar la contraseña");
        }
      };
    }
  });
</script>
