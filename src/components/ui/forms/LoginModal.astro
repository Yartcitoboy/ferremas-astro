---
// Import necessary components from their individual files
import EmailInput from "./input/EmailInput.astro";
import PasswordInput from "./input/PasswordInput.astro";
import Checkbox from "./input/Checkbox.astro";
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";
import GoogleBtn from "@components/ui/buttons/GoogleBtn.astro";

// Variables for customization of the LoginModal Component

const config = {
  id: "hs-toggle-between-modals-login-modal",
  title: "Iniciar Sesión",
  subTitle: "¿Aún no tienes cuenta?",
  registerBtn: "Regístrate aquí",
  registerBtnDataHS: "#hs-toggle-between-modals-register-modal",
};
---

<div
  id={config.id}
  class="hs-overlay absolute start-0 top-0 z-50 hidden h-full w-full hs-overlay-backdrop-open:bg-neutral-900/90"
>
  <div
    class="m-3 mt-0 opacity-0 transition-all ease-out hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 sm:mx-auto sm:w-full sm:max-w-lg"
  >
    <div class="mx-auto w-full max-w-md p-6">
      <div
        class="mt-7 rounded-xl border border-neutral-200 bg-neutral-100 shadow-xs dark:border-neutral-700 dark:bg-neutral-800"
      >
        <div class="p-4 sm:p-7">
          <div class="text-center">
            <h2
              class="block text-2xl font-bold text-neutral-800 dark:text-neutral-200"
            >
              {config.title}
            </h2>
            <p class="mt-2 text-sm text-neutral-600 dark:text-neutral-400">
              {config.subTitle}
              <button
                class="rounded-lg p-1 font-medium text-orange-400 decoration-2 outline-hidden ring-zinc-500 hover:underline focus-visible:ring-3 dark:text-orange-400 dark:ring-zinc-200 dark:focus:outline-hidden"
                data-hs-overlay={config.registerBtnDataHS}
              >
                {config.registerBtn}
              </button>
            </p>
          </div>
          <div class="mt-5">
            <GoogleBtn title="Inicia sesión con Google" />

            <div
              class="flex items-center py-3 text-xs uppercase text-neutral-400 before:me-6 before:flex-[1_1_0%] before:border-t before:border-neutral-200 after:ms-6 after:flex-[1_1_0%] after:border-t after:border-neutral-200 dark:text-neutral-500 dark:before:border-neutral-600 dark:after:border-neutral-600"
            >
              O
            </div>
            <form id="loginForm" method="post">
              <div class="grid gap-y-4">
                {/* ESTE FUE EL CAMBIO: name="email" */}
                <EmailInput id="login-email" errorId="login-email-error" name="email" />
                {/* ESTE FUE EL CAMBIO: name="contrasena" */}
                <PasswordInput
                  forgot={true}
                  id="password"
                  errorId="login-password-error"
                  content="8+ characters required"
                  name="contrasena"
                />
                <Checkbox id="remember-me" />
                <AuthBtn title="Acceder" />
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const loginForm = document.getElementById('loginForm') as HTMLFormElement;
  loginForm.addEventListener('submit', async (event) => {
    event.preventDefault();

    const formData = new FormData(loginForm);
    const email = formData.get('email');
    const password = formData.get('contrasena');

    console.log('Email:', email);
    console.log('Password:', password);

    const body = new URLSearchParams(formData as any).toString();
    console.log('Cuerpo de la petición:', body);

    try {
      const response = await fetch('http://localhost:8000/usuarios_auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: body,
      });

      console.log('Estado de la respuesta:', response.status);
      const data = await response.json();
      console.log('Respuesta del servidor (raw):', JSON.stringify(data, null, 2));

      if (response.ok) {
        localStorage.setItem('accessToken', data.access_token);
        localStorage.setItem('userName', data.nombre_apellidos || 'Usuario'); // Ajusta el campo según tu API
        localStorage.setItem('id_usuario', data.id_usuario);
        console.log('Token guardado:', data.access_token);
        try {
          const tokenPayload = JSON.parse(atob(data.access_token.split('.')[1]));
          console.log('Payload del token:', tokenPayload);
          const userRole = tokenPayload.role;
          console.log('Rol del usuario:', userRole);

          // ESTE FUE EL CAMBIO: Dispara un evento personalizado para que la Navbar se actualice
          window.dispatchEvent(new CustomEvent('login-success'));

          if (userRole === 'Administrador') {
            window.location.href = '/users/dashAdmin';
          } else if (userRole === 'Bodeguero') {
            window.location.href = '/users/dashBodeguero';
          } else if (userRole === 'Vendedor') {
            window.location.href = '/users/dashVendedor';
          } else if (userRole === 'Contador') {
            window.location.href = '/users/dashContador';
          } else {
            window.location.href = '/'; // Página por defecto
          }
        } catch (error) {
          console.error('Error al decodificar el token:', error);
          alert('Error al procesar la respuesta del login.');
        }
      } else {
        console.error('Error al iniciar sesión:', data.detail);
        alert('Error al iniciar sesión.');
      }
    } catch (error) {
      console.error('Hubo un error al comunicarse con el servidor:', error);
      alert('Error de conexión.');
    }
  });
</script>