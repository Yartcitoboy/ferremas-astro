<section
  id="cart-section"
  class="fixed top-8 right-0 z-50 hidden w-96 bg-white p-6 shadow-lg transition-transform duration-500"
>
  <h2 class="mb-4 text-xl font-bold">Carrito</h2>
  <div id="cart-items" class="mb-4">
    {/* Los items del carrito se renderizan aqu√≠ por el script */}
  </div>
  <div class="mb-4 border-t pt-4">
    <div
      id="descuento-row"
      class="mb-1 flex items-center justify-between"
      style="display:none;"
    >
      <span class="text-red-600">Descuento:</span>
      <strong class="text-red-600">-$<span id="cart-descuento">0</span></strong>
    </div>
    <div class="mb-2 flex items-center justify-between">
      <span>Subtotal:</span>
      <strong>$<span id="cart-subtotal">0</span></strong>
    </div>
    <div id="oferta-msg" class="mt-2 font-semibold text-green-600"></div>
    <div class="flex items-center justify-between text-lg font-semibold">
      <span>Total:</span>
      <strong>$<span id="cart-total">0</span></strong>
    </div>
  </div>
  <div class="flex flex-col gap-2">
    <div id="paypal-button-container"></div>
    <button class="rounded bg-gray-300 px-4 py-2 text-gray-700">
      Transferencia (Pr√≥ximamente)
    </button>
    <button
      id="clear-cart"
      class="mt-2 w-full text-center text-red-600 hover:underline"
    >
      Vaciar Carrito
    </button>
  </div>
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    // Carrito en memoria
    let cart = JSON.parse(localStorage.getItem("cart") || "[]");

    function saveCart() {
      localStorage.setItem("cart", JSON.stringify(cart));
      cart = JSON.parse(localStorage.getItem("cart") || "[]");
      updateCartUI();
    }

    function addToCart(product) {
      const found = cart.find(
        (item) => item.id_producto === product.id_producto
      );
      if (found) {
        found.qty += 1;
      } else {
        cart.push({ ...product, qty: 1 });
      }
      saveCart();
      animateCart();
    }

    function removeFromCart(id) {
      cart = cart.filter((item) => item.id_producto != id);
      saveCart();
    }

    function clearCart() {
      cart = [];
      saveCart();
    }

    function changeQty(id, delta) {
      const idx = cart.findIndex((item) => item.id_producto == id);
      if (idx !== -1) {
        cart[idx].qty = Math.max(1, cart[idx].qty + delta);
        saveCart();
      }
    }
    window.changeQty = changeQty;

    function mostrarOfertaMsg(totalQty) {
      const ofertaMsg = document.getElementById("oferta-msg");
      if (ofertaMsg) {
        if (totalQty >= 4) {
          ofertaMsg.textContent =
            "¬°Oferta aplicada: 10% de descuento por comprar 4 o m√°s productos!";
        } else {
          ofertaMsg.textContent = "";
        }
      }
    }

    function updateCartUI() {
      const cartItemsContainer = document.getElementById("cart-items");
      const cartCount = document.getElementById("cart-count");
      const cartTotalElement = document.getElementById("cart-total");
      const cartSubtotalElement = document.getElementById("cart-subtotal");
      const descuentoRow = document.getElementById("descuento-row");
      const cartDescuentoElement = document.getElementById("cart-descuento");
      const total = calculateSelectedTotal();
      const subtotal = calculateSelectedSubtotal();
      const totalQty = cart.reduce((sum, item) => sum + item.qty, 0);
      const descuento = subtotal - total;

      if (!cartItemsContainer) return;

      cartItemsContainer.innerHTML = cart.length
        ? cart
            .map(
              (item) => `
      <div class="flex items-center mb-4 border-b pb-2">
        <input type="checkbox" class="mr-2" id="item-${item.id_producto}" checked onchange="window.recalculateTotal()">
        <img src="${item.imagen}" alt="${item.nombre}" class="w-16 h-16 object-cover mr-4 rounded">
        <div class="flex-grow">
          <h6 class="font-semibold">${item.nombre}</h6>
          <div class="flex items-center gap-2 mt-1">
            <button class="px-2 py-1 bg-gray-200 text-gray-700 rounded" onclick="window.changeQty('${item.id_producto}', -1)">‚àí</button>
            <span class="text-sm">${item.qty}</span>
            <button class="px-2 py-1 bg-gray-200 text-gray-700 rounded" onclick="window.changeQty('${item.id_producto}', 1)">+</button>
          </div>
        </div>
        <span class="font-semibold">$${(item.precio * item.qty).toFixed(2)}</span>
        <button onclick="window.removeFromCart('${item.id_producto}')" class="ml-4 text-red-500">üóëÔ∏è</button>
      </div>
    `
            )
            .join("")
        : "<em class='block py-4 text-gray-500'>El carrito est√° vac√≠o</em>";

      if (cartCount)
        cartCount.textContent = cart.reduce((sum, item) => sum + item.qty, 0);
      if (cartTotalElement) cartTotalElement.textContent = total.toFixed(2);
      if (cartSubtotalElement)
        cartSubtotalElement.textContent = subtotal.toFixed(2);

      // Mostrar descuento
      if (descuentoRow && cartDescuentoElement) {
        if (descuento > 0.01) {
          descuentoRow.style.display = "flex";
          cartDescuentoElement.textContent = descuento.toFixed(2);
        } else {
          descuentoRow.style.display = "none";
          cartDescuentoElement.textContent = "0";
        }
      }

      // Mostrar mensaje de oferta solo aqu√≠
      mostrarOfertaMsg(totalQty);

      // Renderizar el bot√≥n de PayPal cada vez que se actualiza el carrito
      const paypalButtonContainer = document.getElementById(
        "paypal-button-container"
      );
      if (paypalButtonContainer && window.paypal) {
        paypalButtonContainer.innerHTML = "";
        paypal
          .Buttons({
            createOrder: function (data, actions) {
              return actions.order.create({
                purchase_units: [
                  {
                    amount: {
                      value: calculateSelectedTotal().toFixed(2),
                      currency_code: "USD",
                    },
                  },
                ],
              });
            },
            onApprove: async function (data, actions) {
              console.log("onApprove ejecutado", data);
              return actions.order.capture().then(async function (details) {
                // 1. Prepara los datos del pedido
                const id_usuario = localStorage.getItem("id_usuario");
                const direccion_envio =
                  localStorage.getItem("direccion_envio") ||
                  "Direcci√≥n no especificada";
                const cart = JSON.parse(localStorage.getItem("cart") || "[]");
                const items = cart.map((item) => ({
                  id_producto: item.id_producto,
                  cantidad: item.qty,
                  precio_unitario: item.precio,
                }));
                const total = calculateSelectedTotal();

                // 2. Env√≠a el pedido al backend
                try {
                  console.log("Enviando fetch a /capture-paypal-order", {
                    orderID: data.orderID,
                    userId: id_usuario,
                    items,
                    total,
                    direccion_envio,
                  });
                  const res = await fetch(
                    "http://localhost:6500/capture-paypal-order",
                    {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        orderID: data.orderID,
                        userId: id_usuario,
                        items,
                        total,
                        direccion_envio,
                      }),
                    }
                  );
                  const result = await res.json();
                  console.log("Pedido y pago creado:", result);
                } catch (err) {
                  console.error("Error al crear pedido y pago:", err);
                }

                // 3. Limpia el carrito y redirige
                clearCart();
                window.location.href = "/tranks/gracias-por-tu-compra";
              });
            },
            onError: function (err) {
              console.error("Error de PayPal:", err);
            },
          })
          .render("#paypal-button-container");
      }
    }

    function recalculateTotal() {
      const cartTotalElement = document.getElementById("cart-total");
      const cartSubtotalElement = document.getElementById("cart-subtotal");
      const descuentoRow = document.getElementById("descuento-row");
      const cartDescuentoElement = document.getElementById("cart-descuento");
      const total = calculateSelectedTotal();
      const subtotal = calculateSelectedSubtotal();
      const totalQty = cart.reduce((sum, item) => sum + item.qty, 0);
      const descuento = subtotal - total;

      if (cartTotalElement) cartTotalElement.textContent = total.toFixed(2);
      if (cartSubtotalElement)
        cartSubtotalElement.textContent = subtotal.toFixed(2);

      // Mostrar descuento
      if (descuentoRow && cartDescuentoElement) {
        if (descuento > 0.01) {
          descuentoRow.style.display = "flex";
          cartDescuentoElement.textContent = descuento.toFixed(2);
        } else {
          descuentoRow.style.display = "none";
          cartDescuentoElement.textContent = "0";
        }
      }

      // Mostrar mensaje de oferta solo aqu√≠
      mostrarOfertaMsg(totalQty);
    }
    window.recalculateTotal = recalculateTotal;

    function calculateSelectedSubtotal() {
      let subtotal = 0;
      cart.forEach((item) => {
        const checkbox = document.getElementById(`item-${item.id_producto}`);
        if (checkbox?.checked) {
          subtotal += item.precio * item.qty;
        }
      });
      return subtotal;
    }

    function calculateSelectedTotal() {
      let selectedTotal = 0;
      let totalQty = 0;
      cart.forEach((item) => {
        const checkbox = document.getElementById(`item-${item.id_producto}`);
        if (checkbox?.checked) {
          selectedTotal += item.precio * item.qty;
          totalQty += item.qty;
        }
      });
      // Aplica oferta si hay 4 o m√°s productos
      if (totalQty >= 4) {
        selectedTotal = selectedTotal * 0.9; // 10% de descuento
      }
      return selectedTotal;
    }

    function animateCart() {
      const btn = document.getElementById("open-cart");
      if (btn) {
        btn.classList.add("animate-bounce");
        setTimeout(() => btn.classList.remove("animate-bounce"), 500);
      }
    }

    // Botones abrir/cerrar/limpiar
    const openCartButton = document.getElementById("open-cart");
    if (openCartButton) {
      openCartButton.onclick = () => {
        updateCartUI();
        document.getElementById("cart-section").classList.remove("hidden");
      };
    }

    const closeCartButton = document.getElementById("close-cart");
    const cartSection = document.getElementById("cart-section");
    if (closeCartButton && cartSection) {
      closeCartButton.onclick = () => {
        cartSection.classList.add("hidden");
      };
    }

    const clearCartButton = document.getElementById("clear-cart");
    if (clearCartButton) {
      clearCartButton.onclick = () => clearCart();
    }

    // Exponer funciones globales
    window.addToCart = addToCart;
    window.removeFromCart = removeFromCart;
    window.changeQty = changeQty;

    // Inicializar UI
    updateCartUI();
  });
</script>
