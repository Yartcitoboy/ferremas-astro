<section id="cart-section" class="fixed top-8 right-0 w-96 bg-white shadow-lg z-50 p-6 hidden transition-transform duration-500">
    <h2 class="text-xl font-bold mb-4">Carrito</h2>
    <div id="cart-items" class="mb-4">
        {/* Los items del carrito se renderizan aqu√≠ por el script */}
    </div>
    <div class="border-t pt-4 mb-4">
        <div class="flex justify-between items-center mb-2">
            <span>Subtotal:</span>
            <strong>$<span id="cart-total">0</span></strong>
        </div>
        {/* Aqu√≠ podr√≠as a√±adir descuentos, costos de env√≠o, etc. */}
        <div class="font-semibold text-lg flex justify-between items-center">
            <span>Total:</span>
            <strong>$<span id="cart-total">0</span></strong>
        </div>
    </div>
    <div class="flex flex-col gap-2">
        <div id="paypal-button-container"></div>
        <button class="bg-gray-300 text-gray-700 py-2 px-4 rounded">Transferencia (Pr√≥ximamente)</button>
        <button id="clear-cart" class="text-red-600 hover:underline mt-2 w-full text-center">Vaciar Carrito</button>
    </div>
</section>

<script is:inline>
document.addEventListener("DOMContentLoaded", () => {
  // Carrito en memoria
  let cart = JSON.parse(localStorage.getItem("cart") || "[]");

  function saveCart() {
    localStorage.setItem("cart", JSON.stringify(cart));
    // Recarga el array cart despu√©s de guardar para mantenerlo actualizado
    cart = JSON.parse(localStorage.getItem("cart") || "[]");
    updateCartUI();
  }

  function addToCart(product) {
    const found = cart.find(item => item.id_producto === product.id_producto);
    if (found) {
      found.qty += 1;
    } else {
      cart.push({ ...product, qty: 1 });
    }
    saveCart();
    animateCart();
  }

  function removeFromCart(id) {
    cart = cart.filter(item => item.id_producto != id);
    saveCart();
  }

  function clearCart() {
    cart = [];
    saveCart();
  }

  function changeQty(id, delta) {
    const idx = cart.findIndex(item => item.id_producto == id);
    if (idx !== -1) {
      cart[idx].qty = Math.max(1, cart[idx].qty + delta);
      saveCart();
    }
  }
  window.changeQty = changeQty;

  function updateCartUI() {
    const cartItemsContainer = document.getElementById("cart-items");
    const cartCount = document.getElementById("cart-count");
    const cartTotalElement = document.getElementById("cart-total");
    if (!cartItemsContainer) return;

    cartItemsContainer.innerHTML = cart.length
      ? cart.map(item => `
        <div class="flex items-center mb-4 border-b pb-2">
          <input type="checkbox" class="mr-2" id="item-${item.id_producto}" checked onchange="window.recalculateTotal()">
          <img src="${item.imagen}" alt="${item.nombre}" class="w-16 h-16 object-cover mr-4 rounded">
          <div class="flex-grow">
            <h6 class="font-semibold">${item.nombre}</h6>
            <div class="flex items-center gap-2 mt-1">
              <button class="px-2 py-1 bg-gray-200 text-gray-700 rounded" onclick="window.changeQty('${item.id_producto}', -1)">‚àí</button>
              <span class="text-sm">${item.qty}</span>
              <button class="px-2 py-1 bg-gray-200 text-gray-700 rounded" onclick="window.changeQty('${item.id_producto}', 1)">+</button>
            </div>
          </div>
          <span class="font-semibold">$${(item.precio * item.qty).toFixed(2)}</span>
          <button onclick="window.removeFromCart('${item.id_producto}')" class="ml-4 text-red-500">üóëÔ∏è</button>
        </div>
      `).join("")
      : "<em class='block py-4 text-gray-500'>El carrito est√° vac√≠o</em>";

    if (cartCount) cartCount.textContent = cart.reduce((sum, item) => sum + item.qty, 0);
    const total = calculateSelectedTotal();
    if (cartTotalElement) cartTotalElement.textContent = total.toFixed(2);

    // Renderizar el bot√≥n de PayPal cada vez que se actualiza el carrito
    const paypalButtonContainer = document.getElementById('paypal-button-container');
    if (paypalButtonContainer && window.paypal) {
      paypalButtonContainer.innerHTML = '';
      paypal.Buttons({
        // ...tu l√≥gica de PayPal...
      }).render('#paypal-button-container');
    }
  }

  function recalculateTotal() {
    const cartTotalElement = document.getElementById("cart-total");
    const total = calculateSelectedTotal();
    if (cartTotalElement) cartTotalElement.textContent = total.toFixed(2);
  }
  window.recalculateTotal = recalculateTotal;

  function calculateSelectedTotal() {
    let selectedTotal = 0;
    cart.forEach(item => {
      const checkbox = document.getElementById(`item-${item.id_producto}`);
      if (checkbox?.checked) {
        selectedTotal += item.precio * item.qty;
      }
    });
    return selectedTotal;
  }

  function animateCart() {
    const btn = document.getElementById("open-cart");
    if (btn) {
      btn.classList.add("animate-bounce");
      setTimeout(() => btn.classList.remove("animate-bounce"), 500);
    }
  }

  // Botones abrir/cerrar/limpiar
  const openCartButton = document.getElementById("open-cart");
  if (openCartButton) {
    openCartButton.onclick = () => {
      updateCartUI();
      document.getElementById("cart-section").classList.remove("hidden");
    };
  }

  const closeCartButton = document.getElementById("close-cart");
  const cartSection = document.getElementById("cart-section");
  if (closeCartButton && cartSection) {
    closeCartButton.onclick = () => {
      cartSection.classList.add("hidden");
    };
  }

  const clearCartButton = document.getElementById("clear-cart");
  if (clearCartButton) {
    clearCartButton.onclick = () => clearCart();
  }

  // Exponer funciones globales
  window.addToCart = addToCart;
  window.removeFromCart = removeFromCart;
  window.changeQty = changeQty;

  // Inicializar UI
  updateCartUI();
});
</script>