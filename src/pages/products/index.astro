---
// Importing necessary components
import MainLayout from "@/layouts/MainLayout.astro";
import CardSmall from "@components/ui/cards/CardSmall.astro";
import CardWide from "@components/ui/cards/CardWide.astro";
import CardCarrito from "@/components/shop/cardCarrito.astro";

// Fetching product data from the API
const response = await fetch("http://localhost:6500/product", {
  headers: {
    "x-api-key": "miclaveultrasecreta123." // AsegÃºrate de usar la API Key correcta
  }
});

if (!response.ok) {
  throw new Error("Error al obtener los productos desde la API");
}

const products = await response.json();

// Define variables for page content
const title: string = "Productos Destacados";
const pageTitle: string = `Products | ScrewFast`;
---

<MainLayout
  title={pageTitle}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "WebPage",
    "@id": "https://screwfast.uk/products",
    "url": "https://screwfast.uk/products",
    "name": "Hardware Tools | ScrewFast",
    "description": "Explore the durability and precision of ScrewFast tools, designed for both professionals and enthusiasts.",
    "isPartOf": {
      "@type": "WebSite",
      "url": "https://screwfast.uk",
      "name": "ScrewFast",
      "description": "ScrewFast offers top-tier hardware tools and expert construction services to meet all your project needs."
    },
    "inLanguage": "en-US"
  }}
>
  <div class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
    <div class="mb-4 flex items-center justify-between gap-8 sm:mb-8 md:mb-12">
      <div class="flex items-center gap-12">
        <h1
          class="text-balance text-2xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
        >
          {title}
        </h1>
        <button id="open-cart" class="ml-6 bg-blue-600 text-white rounded-full p-3 shadow-lg z-50 flex items-center gap-2">
          ðŸ›’ <span id="cart-count">0</span>
        </button>

        <label for="currency-select" class="text-sm font-medium text-neutral-700 dark:text-neutral-300">Moneda:</label>
        <select id="currency-select" class="border border-gray-300 rounded px-3 py-1 text-sm">
          <option value="USD" selected>USD $</option>
          <option value="CLP">CLP $</option>
        </select>
      </div>
    </div>

    <section class="grid grid-cols-1 gap-4 sm:grid-cols-3 md:gap-6 xl:gap-8">
      {
        products.map((product: any, index: number) => {
          <p class="text-xs text-gray-400">DEBUG: {JSON.stringify(product)}</p>
          const position = index % 4;
          if (position === 0 || position === 3) {
            return <CardSmall product={product} />;
          } else {
            return <CardWide product={product} />;
          }
        })
      }
    </section>
  </div>
</MainLayout>

<div id="cart-modal-backdrop" class="fixed inset-0 z-50 hidden">
  <div id="cart-panel"
    class="fixed top-0 right-0 h-full w-full max-w-md bg-black shadow-2xl p-6 transform translate-x-full transition-transform duration-300 ease-in-out"
  >
    <button id="close-cart" class="absolute top-2 right-2 text-2xl text-gray-500 hover:text-red-600">&times;</button>
    <CardCarrito />
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const openBtn = document.getElementById("open-cart");
    const closeBtn = document.getElementById("close-cart");
    const backdrop = document.getElementById("cart-modal-backdrop");
    const panel = document.getElementById("cart-panel");

    openBtn?.addEventListener("click", () => {
      backdrop.classList.remove("hidden");
      setTimeout(() => {
        panel.classList.remove("translate-x-full");
      }, 10); // Espera para que la transiciÃ³n funcione
    });

    closeBtn?.addEventListener("click", () => {
      panel.classList.add("translate-x-full");
      setTimeout(() => {
        backdrop.classList.add("hidden");
      }, 300); // Espera a que termine la transiciÃ³n
    });

    // Cierra el panel al hacer click en el fondo oscuro
    backdrop?.addEventListener("click", (e) => {
      if (e.target === backdrop) {
        panel.classList.add("translate-x-full");
        setTimeout(() => {
          backdrop.classList.add("hidden");
        }, 300);
      }
    });
  });

  let tasaCambio = 0;

  async function obtenerTasaCambio() {
    try {
      const res = await fetch("https://v6.exchangerate-api.com/v6/5e6937378c7f54c73181a2af/latest/USD");
      const data = await res.json();
      tasaCambio = data.conversion_rates.CLP;
    } catch (e) {
      console.error("Error al obtener tasa de cambio:", e);
      tasaCambio = 900; // Valor de respaldo si falla
    }
  }

  async function actualizarPrecios(moneda) {
    if (!tasaCambio && moneda === "CLP") {
      await obtenerTasaCambio();
    }

    const precios = document.querySelectorAll(".precio-producto");
    precios.forEach((el) => {
      const precioUSD = parseFloat(el.getAttribute("data-precio-usd"));
      if (moneda === "USD") {
        el.textContent = `$${precioUSD.toFixed(2)} USD`;
      } else if (moneda === "CLP") {
        const clp = precioUSD * tasaCambio;
        el.textContent = (Math.round(clp)).toLocaleString("es-CL", {
          style: "currency",
          currency: "CLP",
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        });
      }
    });
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const select = document.getElementById("currency-select");
    if (!select) return;

    await obtenerTasaCambio(); // Obtener la tasa de cambio al cargar la pÃ¡gina

    select.addEventListener("change", (e) => {
      const monedaSeleccionada = e.target.value;
      actualizarPrecios(monedaSeleccionada);
    });

    // Carga inicial con la moneda seleccionada
    actualizarPrecios(select.value);
  });
</script>