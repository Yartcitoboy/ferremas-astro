---
import { Truck } from "@lucide/astro";
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout>
  <div class="flex min-h-screen flex-col bg-neutral-900 text-white">
    <header
      class="sticky top-0 z-10 flex h-16 items-center gap-4 border-b border-neutral-700 bg-neutral-800 px-8"
    >
      <h1 class="text-2xl font-bold tracking-wide text-orange-500">
        Panel de Vendedor
      </h1>
    </header>

    <nav
      class="flex gap-4 border-b border-neutral-700 bg-neutral-800 px-8 py-4"
    >
      <button
        class="tab-btn active rounded-lg bg-neutral-700 px-6 py-3 font-semibold"
        data-tab="inventario">Inventario</button
      >
      <button
        class="tab-btn rounded-lg px-6 py-3 font-semibold"
        data-tab="pedidos">Pedidos</button
      >
      <button
        class="tab-btn rounded-lg px-6 py-3 font-semibold"
        data-tab="despachos">Despachos</button
      >
    </nav>

    <main class="flex-1 space-y-10 px-8 py-6">
      <!-- Inventario -->
      <section id="inventario" class="">
        <h2 class="mb-4 text-xl font-semibold text-orange-400">Inventario</h2>
        <div
          class="overflow-x-auto rounded-lg border border-neutral-700 bg-neutral-800 shadow"
        >
          <table
            class="min-w-full border-collapse text-left text-sm text-neutral-300"
          >
            <thead class="bg-neutral-700 text-neutral-200">
              <tr>
                <th class="border-b border-neutral-700 px-6 py-3">Código</th>
                <th class="border-b border-neutral-700 px-6 py-3">Nombre</th>
                <th class="border-b border-neutral-700 px-6 py-3">Categoría</th>
                <th class="border-b border-neutral-700 px-6 py-3">Stock</th>
                <th class="border-b border-neutral-700 px-6 py-3">Precio</th>
              </tr>
            </thead>
            <tbody id="inventario-tbody"></tbody>
          </table>
        </div>
      </section>

      <!-- Pedidos -->
      <section id="pedidos" class="hidden">
        <h2 class="mb-4 text-xl font-semibold text-orange-400">Pedidos</h2>
        <div
          class="overflow-x-auto rounded-lg border border-neutral-700 bg-neutral-800 shadow"
        >
          <table
            class="min-w-full border-collapse text-left text-sm text-neutral-300"
          >
            <thead class="bg-neutral-700 text-neutral-200">
              <tr>
                <th class="border-b border-neutral-700 px-6 py-3">N° Pedido</th>
                <th class="border-b border-neutral-700 px-6 py-3">Cliente</th>
                <th class="border-b border-neutral-700 px-6 py-3">Fecha</th>
                <th class="border-b border-neutral-700 px-6 py-3">Total</th>
                <th class="border-b border-neutral-700 px-6 py-3">Estado</th>
                <th class="border-b border-neutral-700 px-6 py-3">Acciones</th>
              </tr>
            </thead>
            <tbody id="pedidos-tbody"></tbody>
          </table>
        </div>
      </section>

      <!-- Despachos -->
      <section id="despachos" class="hidden">
        <h2
          class="mb-4 flex items-center gap-2 text-xl font-semibold text-orange-400"
        >
          <Truck class="h-6 w-6 text-orange-400" /> Despachos
        </h2>
        <div
          class="overflow-x-auto rounded-lg border border-neutral-700 bg-neutral-800 shadow"
        >
          <table
            class="min-w-full border-collapse text-left text-sm text-neutral-300"
          >
            <thead class="bg-neutral-700 text-neutral-200">
              <tr>
                <th class="border-b border-neutral-700 px-6 py-3"
                  >N° Despacho</th
                >
                <th class="border-b border-neutral-700 px-6 py-3">N° Pedido</th>
                <th class="border-b border-neutral-700 px-6 py-3"
                  >Fecha de Envío</th
                >
                <th class="border-b border-neutral-700 px-6 py-3">Dirección</th>
                <th class="border-b border-neutral-700 px-6 py-3">Estado</th>
                <th class="border-b border-neutral-700 px-6 py-3">Acciones</th>
              </tr>
            </thead>
            <tbody id="despachos-tbody"></tbody>
          </table>
        </div>
      </section>
    </main>
  </div>

  <script type="module">
    // --- Configuración de endpoints y columnas ---
    const config = {
      inventario: {
        url: "http://localhost:6500/product",
        renderRow: (p) => `
          <td class="px-6 py-3">${p.id_producto}</td>
          <td class="px-6 py-3">${p.nombre}</td>
          <td class="px-6 py-3">${p.categoria}</td>
          <td class="px-6 py-3">${p.stock}</td>
          <td class="px-6 py-3">$${p.precio}</td>
        `,
      },
      pedidos: {
        url: "http://localhost:6500/pedido",
        renderRow: (p) => `
          <td class="px-6 py-3">${p.id_pedido}</td>
          <td class="px-6 py-3">${p.cliente}</td>
          <td class="px-6 py-3">${p.fecha}</td>
          <td class="px-6 py-3">$${p.total}</td>
          <td class="px-6 py-3">${p.estado}</td>
          <td class="px-6 py-3">
            <button class="text-indigo-500 hover:text-indigo-600 aprobar-btn" title="Aprobar" data-id="${p.id_pedido}">✔️</button>
            <button class="text-red-500 hover:text-red-600 rechazar-btn" title="Rechazar" data-id="${p.id_pedido}">❌</button>
          </td>
        `,
      },
      despachos: {
        url: "http://localhost:6500/despacho",
        renderRow: (d) => `
  <td class="px-6 py-3">${d.id_despacho ?? d.id_pedido}</td>
  <td class="px-6 py-3">${d.id_pedido}</td>
  <td class="px-6 py-3">
    <input type="date" value="${d.fecha_entrega ? d.fecha_entrega.split("T")[0] : ""}" class="fecha-entrega-input bg-neutral-700 text-white px-2 py-1 rounded" data-id="${d.id_pedido}" />
  </td>
  <td class="px-6 py-3">
    <input type="text" value="${d.direccion_envio ?? ""}" class="direccion-envio-input bg-neutral-700 text-white px-2 py-1 rounded" data-id="${d.id_pedido}" />
  </td>
  <td class="px-6 py-3">${d.estado}</td>
  <td class="px-6 py-3 flex gap-2">
    <button class="btn-actualizar bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded" data-id="${d.id_pedido}">Actualizar</button>
    <button class="btn-entregar bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded" data-id="${d.id_pedido}">Confirmar Entrega</button>
  </td>
`,
      },
    };

    // --- Renderizado genérico de tablas ---
    async function fetchAndRender(tab) {
      const { url, renderRow } = config[tab];
      const tbody = document.getElementById(`${tab}-tbody`);
      if (!tbody) return;
      tbody.innerHTML = "<tr><td colspan='100%'>Cargando...</td></tr>";
      try {
        const res = await fetch(url);
        if (!res.ok) throw new Error("Error al obtener datos");
        const data = await res.json();
        const items = Array.isArray(data) ? data : data[tab] || data;
        tbody.innerHTML = "";
        items.forEach((item) => {
          const row = document.createElement("tr");
          row.classList.add("hover:bg-neutral-700");
          row.innerHTML = renderRow(item);
          tbody.appendChild(row);
        });
        if (tab === "pedidos") addPedidosListeners();
        if (tab === "despachos") addDespachosListeners();
      } catch (e) {
        tbody.innerHTML = `<tr><td colspan='100%'>Error al cargar datos</td></tr>`;
        console.error(e);
      }
    }

    // --- Acciones de pedidos ---
    function addPedidosListeners() {
      document.querySelectorAll(".aprobar-btn").forEach((btn) => {
        btn.addEventListener("click", async () => {
          const id = btn.dataset.id;
          await fetch(`http://localhost:6500/pedido/${id}/aprobar`, {
            method: "POST",
          });
          fetchAndRender("pedidos");
        });
      });
      document.querySelectorAll(".rechazar-btn").forEach((btn) => {
        btn.addEventListener("click", async () => {
          const id = btn.dataset.id;
          await fetch(`http://localhost:6500/pedido/${id}/rechazar`, {
            method: "POST",
          });
          fetchAndRender("pedidos");
        });
      });
    }

    // --- Acciones de despachos ---
    function addDespachosListeners() {
      // Actualizar fecha y dirección
      // Actualizar fecha_entrega y direccion_envio
      document.querySelectorAll(".btn-actualizar").forEach((btn) => {
        btn.addEventListener("click", async () => {
          const id = btn.dataset.id;
          const fecha = document.querySelector(
            `.fecha-entrega-input[data-id="${id}"]`
          ).value;
          const direccion = document.querySelector(
            `.direccion-envio-input[data-id="${id}"]`
          ).value;
          await fetch(`http://localhost:6500/despacho/${id}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              fecha_entrega: fecha,
              direccion_envio: direccion,
            }),
          });
          fetchAndRender("despachos");
        });
      });

      // Confirmar entrega
      document.querySelectorAll(".btn-entregar").forEach((btn) => {
        btn.addEventListener("click", async () => {
          const id = btn.dataset.id;
          await fetch(`http://localhost:6500/despacho/${id}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ estado: "Entregado" }),
          });
          fetchAndRender("despachos");
        });
      });
    }

    // --- Tabs ---
    document.addEventListener("DOMContentLoaded", () => {
      const tabs = document.querySelectorAll(".tab-btn");
      const sections = {
        inventario: document.getElementById("inventario"),
        pedidos: document.getElementById("pedidos"),
        despachos: document.getElementById("despachos"),
      };

      // Mostrar la primera sección por defecto
      Object.values(sections).forEach((section) =>
        section.classList.add("hidden")
      );
      sections.inventario.classList.remove("hidden");
      fetchAndRender("inventario");

      tabs.forEach((tab) => {
        tab.addEventListener("click", () => {
          const target = tab.dataset.tab;
          Object.values(sections).forEach((section) =>
            section.classList.add("hidden")
          );
          if (sections[target]) sections[target].classList.remove("hidden");
          tabs.forEach((t) => t.classList.remove("active", "bg-neutral-700"));
          tab.classList.add("active", "bg-neutral-700");
          fetchAndRender(target);
        });
      });
    });
  </script>
</MainLayout>
